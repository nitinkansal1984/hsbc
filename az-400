Ganesh - 12+Exp Windows, HSBC, Azure Associate 104 certified
Goraksh - 15+ unix, HSBC, AZ900, preparing for 104, AZ-400  
Nirmal - AT&T DevOps Engineer, Expertise in Terraform, IAC, AKS Experience
Jaswant - DNV, DevOps Engineer, 13+ Years unix, 3-4 Leadership, Beginner
Sachin - 15+ Unix, HSBC, Basic Knowledge on Azure

X option 1
Monday - Thursday
9:15AM - 11:00AM

option 2
Tuesday - Friday
9:15AM - 11:00AM



What is devops?

developers + operations

SDLC:

Application Development and Deployment:

1. Requirement: 15 to 20 days 
2. Analysis: 10 days
3. Design: 15-20 days
4. Development: 30 days+
5. Testing: 10days
6. Deployment: PAAS, IAAS

DevOps and Agile:

1. Faster time to production
2. Regular feature changes
3. Keep up with market trends
4. Faster integration cylcles
5. Faster deployment cycles

DevOps: CICD -- contineous integration, contineous delivery/deployment

Continuous delivery is a software engineering practice where the code changes are prepared to be released. 
Continuous deployment goes one step further than continuous delivery. Without manual invervention.



Agile: Iterative process. Break entire process in to chunks. With the help of agile process, we achive constant collboaration of teams and customers. More dynamic and flexible in nature as compare to traditional SDLC process.

SCRUM process:--

1. Product Owner:- Gether the requirement from the cusomter and responsble for managing the product backlog. Handed over to scrum master. 
2. Development Team:- a cross functional team that organizes and manages their own work.
3. Scrum Master:- Promotes and support the scrum team. Monitoring the progress being done by the team and support/encourage them to close the pending items.

https://www.crystalloids.com/about-us/how-we-work

The Scrum events--

Sprint - is a period of two weeks during which a given goal gets accomplished. 
Sprint Planning - What can be delivered within a sprint and what work will we need to deliver it?
Daily Scrum - is a daily meeting that the Development Team uses to review progress toward the Sprint Goal 
Sprint Review - is held at the end of each Sprint to review the achievements within that Sprint and adapt product backlog if needed.
Sprint Retrospective - during the retrospective, the Scrum Team inspects itself and creates a plan for improvements


Implementing DevOps:
Changes which needs to be adopted:

1. Culture Changes:

a. Reduce time taken for devleopment and deployment
b. Reduce too many approval
c. Revisit the processes
d. Don't compromise on quality
e. All team members needs to be accountable.

2. Choose the right set of toolset:

a. Jira and Trello for planning, sprint, tasks, problem management, change management
b. GitHub/Azure Repo where you can do source code management - SCM
c. Jenkins or Azure DevOps for CICD
d. IAC tools ansible and terraform, crossplane, Cloud native tool (ARM Template, CFT)
e. Testing tool like SELENIUM
f. Monitoring Tool like promethous, Grafana, DataDog
g. Cloud - AWS, Azure, Google

Azure DevOps Portal:
devops process:

https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process?view=azure-devops&tabs=agile-process


Devops Pricing:
https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/

IQOQ- 

Organization -> project --> Boards, Repos, Pipelines, Test Plan and Artifact on azure devops

Create a new project with agile process. You can always change the process even after creating a project.

Create stories, work items and epic, bugs.
Click on boards - see a different view from there. You can move stories from one stage to other.
Sprints- You can execute story as part of sprint and define the timelines per sprint using set date option there.

WorkItem Queries: You can create and save queries to filter it. Like the work items in opened state/closed state which are assigned to you can be viewed by queries.

Integration of azure board with slack channels/MS team channel.
1. Create slack channel
2. Manage application and add board apps
3. Run commands
/azboards <projectURL>
4. Subscribe to events
5. Enable notifications
6. Test by creating work items.

How to import list of work items from CSV:

https://learn.microsoft.com/en-us/azure/devops/boards/queries/import-work-items-from-csv?view=azure-devops

Creating Teams, Groups, Users, Permissions.

Access Levels:
1. Basic-> provides most of the features within azure devops which excludes azure test plans
2. Basic + Test Plan => this gives access to the basic plan + Test Plan
3. Stakeholders -> Is free access but has limitations. Limited access to azure boards, pipelines, no Access to code repository
4. Visual Studio - get access on azure devops set of tools based on visual studio subscription assigned to the user

org setting -> group > users 

1. BurnDown chart: Focus on the remaining work items within specific period of time.
2. BurnUP Chart: Focus on completed work.
3. Chart for work items: All the work items available
4. Cycle Time: Time taken for the team to complete work items once they start working on it activily
5. Velocity: how your team is delivering as compare to the plan
6. Lead Time: Displays the time taken from the creation of the work items to completion


https://learn.microsoft.com/en-us/azure/devops/report/dashboards/overview?view=azure-devops


--------------------------------------------------------------------------------GitHub and Azure Repos----------------------------------------------------------------------------

What is Git: VCS version control system. Decentralized/Distributed system. Local repo. Edit it, commit it, push it back to github. Collaborate between team members.
TFS: Centralized System. Fetch the file and do the changes and then push it back to TFS server.


3 step process:

1. Add files to staging area
2. Commit the changes with message
3. Push the changes to repo

1. Fast Foward merge
2. 3-way Merge
3. Squash merge

Example of 3-way merge:-

$ git init
$ echo one>1.txt
$ git add .
$ git commit -m 'c1'
$ echo two>2.txt
$ git add .
$ git commit -m 'c2'
$ echo three>3.txt
$ git add .
$ git commit -m 'C3'
$ git branch feature
$ git switch feature
$ echo four>4.txt
$ git add .
$ git commit -m 'c4'
$ echo five>5.txt
$ git add .
$ git commit -m 'c5'
$ git switch master
$echo six>6.txt
$ git add .
$ git commit -m 'c6'
$ git merge feature
$ git log --oneline --all --graph



















