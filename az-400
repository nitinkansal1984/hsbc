Ganesh - 12+Exp Windows, HSBC, Azure Associate 104 certified
Goraksh - 15+ unix, HSBC, AZ900, preparing for 104, AZ-400  
Nirmal - AT&T DevOps Engineer, Expertise in Terraform, IAC, AKS Experience
Jaswant - DNV, DevOps Engineer, 13+ Years unix, 3-4 Leadership, Beginner
Sachin - 15+ Unix, HSBC, Basic Knowledge on Azure

X option 1
Monday - Thursday
9:15AM - 11:00AM

option 2
Tuesday - Friday
9:15AM - 11:00AM



What is devops?

developers + operations

SDLC:

Application Development and Deployment:

1. Requirement: 15 to 20 days 
2. Analysis: 10 days
3. Design: 15-20 days
4. Development: 30 days+
5. Testing: 10days
6. Deployment: PAAS, IAAS

DevOps and Agile:

1. Faster time to production
2. Regular feature changes
3. Keep up with market trends
4. Faster integration cylcles
5. Faster deployment cycles

DevOps: CICD -- contineous integration, contineous delivery/deployment

Continuous delivery is a software engineering practice where the code changes are prepared to be released. 
Continuous deployment goes one step further than continuous delivery. Without manual invervention.



Agile: Iterative process. Break entire process in to chunks. With the help of agile process, we achive constant collboaration of teams and customers. More dynamic and flexible in nature as compare to traditional SDLC process.

SCRUM process:--

1. Product Owner:- Gether the requirement from the cusomter and responsble for managing the product backlog. Handed over to scrum master. 
2. Development Team:- a cross functional team that organizes and manages their own work.
3. Scrum Master:- Promotes and support the scrum team. Monitoring the progress being done by the team and support/encourage them to close the pending items.

https://www.crystalloids.com/about-us/how-we-work

The Scrum events--

Sprint - is a period of two weeks during which a given goal gets accomplished. 
Sprint Planning - What can be delivered within a sprint and what work will we need to deliver it?
Daily Scrum - is a daily meeting that the Development Team uses to review progress toward the Sprint Goal 
Sprint Review - is held at the end of each Sprint to review the achievements within that Sprint and adapt product backlog if needed.
Sprint Retrospective - during the retrospective, the Scrum Team inspects itself and creates a plan for improvements


Implementing DevOps:
Changes which needs to be adopted:

1. Culture Changes:

a. Reduce time taken for devleopment and deployment
b. Reduce too many approval
c. Revisit the processes
d. Don't compromise on quality
e. All team members needs to be accountable.

2. Choose the right set of toolset:

a. Jira and Trello for planning, sprint, tasks, problem management, change management
b. GitHub/Azure Repo where you can do source code management - SCM
c. Jenkins or Azure DevOps for CICD
d. IAC tools ansible and terraform, crossplane, Cloud native tool (ARM Template, CFT)
e. Testing tool like SELENIUM
f. Monitoring Tool like promethous, Grafana, DataDog
g. Cloud - AWS, Azure, Google

Azure DevOps Portal:
devops process:

https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process?view=azure-devops&tabs=agile-process


Devops Pricing:
https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/

IQOQ- 

Organization -> project --> Boards, Repos, Pipelines, Test Plan and Artifact on azure devops

Create a new project with agile process. You can always change the process even after creating a project.

Create stories, work items and epic, bugs.
Click on boards - see a different view from there. You can move stories from one stage to other.
Sprints- You can execute story as part of sprint and define the timelines per sprint using set date option there.

WorkItem Queries: You can create and save queries to filter it. Like the work items in opened state/closed state which are assigned to you can be viewed by queries.

Integration of azure board with slack channels/MS team channel.
1. Create slack channel
2. Manage application and add board apps
3. Run commands
/azboards <projectURL>
4. Subscribe to events
5. Enable notifications
6. Test by creating work items.

How to import list of work items from CSV:

https://learn.microsoft.com/en-us/azure/devops/boards/queries/import-work-items-from-csv?view=azure-devops

Creating Teams, Groups, Users, Permissions.

Access Levels:
1. Basic-> provides most of the features within azure devops which excludes azure test plans
2. Basic + Test Plan => this gives access to the basic plan + Test Plan
3. Stakeholders -> Is free access but has limitations. Limited access to azure boards, pipelines, no Access to code repository
4. Visual Studio - get access on azure devops set of tools based on visual studio subscription assigned to the user

org setting -> group > users 

1. BurnDown chart: Focus on the remaining work items within specific period of time.
2. BurnUP Chart: Focus on completed work.
3. Chart for work items: All the work items available
4. Cycle Time: Time taken for the team to complete work items once they start working on it activily
5. Velocity: how your team is delivering as compare to the plan
6. Lead Time: Displays the time taken from the creation of the work items to completion


https://learn.microsoft.com/en-us/azure/devops/report/dashboards/overview?view=azure-devops


--------------------------------------------------------------------------------GitHub and Azure Repos----------------------------------------------------------------------------

What is Git: VCS version control system. Decentralized/Distributed system. Local repo. Edit it, commit it, push it back to github. Collaborate between team members.
TFS: Centralized System. Fetch the file and do the changes and then push it back to TFS server.


3 step process:

1. Add files to staging area
2. Commit the changes with message
3. Push the changes to repo

1. Fast Foward merge
2. 3-way Merge
3. Squash merge

Example of 3-way merge:-

$ git init
$ echo one>1.txt
$ git add .
$ git commit -m 'c1'
$ echo two>2.txt
$ git add .
$ git commit -m 'c2'
$ echo three>3.txt
$ git add .
$ git commit -m 'C3'
$ git branch feature
$ git switch feature
$ echo four>4.txt
$ git add .
$ git commit -m 'c4'
$ echo five>5.txt
$ git add .
$ git commit -m 'c5'
$ git switch master
$echo six>6.txt
$ git add .
$ git commit -m 'c6'
$ git merge feature
$ git log --oneline --all --graph


Cherry Pick: 
1. Bring in the changes from specific commit. 
2. Choose one or multiple commits

command we will use:
$ git cherry-pick <commitID> 
you can include multiple commits separated by spaces.
$ git cherry-pick <commitID> <commitID>

Without commit:
$ git cherry-pick <commitID> -n
$ git commit -m "message"

Rebase and Merge: 
When it comes to rebasing and merging, most people hesitate to use git rebase as compared to git merge.
The basic purpose of git rebase and git merge is the same, i.e. they help us to bring changes from one branch into another. The difference is that git rebase re-writes the commit history:

Git Rebase Rewrites Commit History
So, if someone else checks out your branch before we rebase ours then it would be really hard to figure out what the history of each branch is.

Put my changes aside in main branch and put feature branches changes and create linear commits. The commit ID changes. Rewrites history by creating new commits. Keeps history clean.
You can undo rebase with git reflog

Always remember:

git rebase, on the other hand, re-writes the changes of one branch onto another branch without the creation of a merge commit:

$ git rebase --onto main <feature1> <feature2> 


Understanding of Docker. 
Install Docker on VM:

https://docs.docker.com/engine/install/ubuntu/


Contineous Integrtion Pipelines: Below is first example:

1. Task - > Steps -> Job --> Stage

1. 

trigger:
- main

pool: 
  vmImage: ubuntu-latest

jobs:
- job: A
  steps:
  - bash: echo "This is first message in the job"

- job: B
  steps:
  - bash: echo "This is second message in the job"


2. 
stages:
 - stage: A
   jobs:
    - job: A1     
    - job: A2

 - stage: B
   jobs: 
    - job: B1
    - job: B2
    
Declare Variables:

variables:
 - name: myvar
   value: "custom"
pool: 
  vmImage: ubuntu-latest

steps:
 - script: |
     echo "This is one $(myvar) message"
     
     
----------------
steps:
 - script: |
     echo "This is one $(myvar) message"
     echo "This is another way of printing the variable ${{ variables.platform }}"
    
----------------

variables:
   - name: myvariable1
     value: globalvalue
   - name: platform
     value: unix    # this is available to all the jobs
   - group: vargrp

 
pool: 
  vmImage: ubuntu-latest

jobs:
 - job: A
   pool:
     vmimage: 'ubuntu-latest'
   variables:
     vara: valueofvariableinsidejobA    # this is only available in job A
   steps:
     - bash: echo $(myvar)  
     - bash: echo $(vara)

 - job: B
   dependsOn: A
   pool:
     vmimage: 'ubuntu-latest'
   variables:
     varc: $(vara)
     varb: valueofvariableinsidejobB
   steps: 
    - bash: echo $(varc)
    - bash: echo $(varb)
    - bash: echo $(myvariable1)
    - bash: echo $(myvariable2)
    
    -----------


pipeline:

1. Accessing azure key vault variables
2. Parameters in pipeline
3. Conditions

---------------------

1. Create a service connection-- this will create a service priniciple - Add this service priniciple in the access policy for secret.
2. Create task in the pipeline to download the secret and create another task to print the value of secret 
OR
2. Go to Library and create the variable group and link the azure keyvault and declare the secrets as variable there.

trigger:
- main

pool: 
  vmimage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Demos(f8b9b693-fc66-4e1b-a547-110404abc3c3)'
    KeyVaultName: 'mykeyvault030323'
    SecretsFilter: '*'
    RunAsPreJob: false

- task: CmdLine@2
  inputs:
    script: |
      echo $(mysecret)


--------------------------
Parameters:
--------------------------
trigger:
- main

pool: 
  vmimage: ubuntu-latest

parameters:
  - name: entervalue
    type: boolean
    default: false

  - name: image
    displayName: Pool Image
    type: string
    default: ubuntu-latest
    values:
    - windows-latest
    - ubuntu-latest
    - macOS-latest 


jobs:
 - job: build
   displayName: build
   pool: 
     vmimage: ${{ parameters.image }}
   steps:
   - task: CmdLine@2
     inputs:
      script: |
       echo ${{ parameters.entervalue }}
       echo The image parameter is ${{ parameters.image }}  
   - task: AzureKeyVault@2
     inputs:
        azureSubscription: 'Demos(f8b9b693-fc66-4e1b-a547-110404abc3c3)'
        KeyVaultName: 'mykeyvault030323'
        SecretsFilter: '*'
        RunAsPreJob: false
   - task: CmdLine@2
     inputs:
        script: |
          echo $(mysecret)

------------------------
Condition
------------------------
trigger:
- main

pool: 
  vmimage: ubuntu-latest

variables:
  myvar: $[eq(variables['Build.sourceBranch'], 'refs/heads/main')]


stages:
- stage: B
#  condition: and(succeeded(), eq(variables.myvar, 'true'))
  jobs: 
  - job: B1 
    steps:
    - script: |
        echo $(Build.sourceBranch)
        echo $(myvar)
        echo Hello World!





-----------------
Registring self hosted agent in ADO:

https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/v2-linux?view=azure-devops

1. Launch a ubuntu based virtual machin on Azure.
2. Click on org setting -> agent pool -> default pool --> add a agent
3. Follow the steps for linux.
4. 

Export the below variable before you run ./config.sh command:

export AGENT_ALLOW_RUNASROOT="1"

root@vm1:~/agent# ./config.sh
Must not run with sudo
root@vm1:~/agent#
root@vm1:~/agent#
root@vm1:~/agent# export AGENT_ALLOW_RUNASROOT="1"
root@vm1:~/agent#
root@vm1:~/agent#
root@vm1:~/agent# ./config.sh

  ___                      ______ _            _ _
 / _ \                     | ___ (_)          | (_)
/ /_\ \_____   _ _ __ ___  | |_/ /_ _ __   ___| |_ _ __   ___  ___
|  _  |_  / | | | '__/ _ \ |  __/| | '_ \ / _ \ | | '_ \ / _ \/ __|
| | | |/ /| |_| | | |  __/ | |   | | |_) |  __/ | | | | |  __/\__ \
\_| |_/___|\__,_|_|  \___| \_|   |_| .__/ \___|_|_|_| |_|\___||___/
                                   | |
        agent v2.217.2             |_|          (commit ef0b5a5)


>> End User License Agreements:

Building sources from a TFVC repository requires accepting the Team Explorer Everywhere End User License Agreement. This step is not required for building sources from Git repositories.

A copy of the Team Explorer Everywhere license agreement can be found at:
  /root/agent/license.html

Enter (Y/N) Accept the Team Explorer Everywhere license agreement now? (press enter for N) > y

>> Connect:

Enter server URL > https://dev.azure.com/kansalster
Enter authentication type (press enter for PAT) >
Enter personal access token > ****************************************************
Connecting to server ...

>> Register Agent:

Enter agent pool (press enter for default) >
Enter agent name (press enter for vm1) > ubuntuvm
Scanning for tool capabilities.
Connecting to the server.
Successfully added the agent
Testing agent connection.
Enter work folder (press enter for _work) >
2023-03-06 04:55:40Z: Settings Saved.
root@vm1:~/agent# 


root@vm1:~/agent# ./svc.sh

Usage:
./svc.sh [install, start, stop, status, uninstall]
Commands:
   install [user]: Install agent service as Root or specified user.
   start: Manually start the agent service.
   stop: Manually stop the agent service.
   status: Display status of agent service.
   uninstall: Uninstall agent service.

root@vm1:~/agent# ./svc.sh status

not installed

root@vm1:~/agent#
root@vm1:~/agent#
root@vm1:~/agent# ./svc.sh install
Creating launch agent in /etc/systemd/system/vsts.agent.kansalster.Default.ubuntuvm.service
Run as user:
Run as uid: 0
gid: 0
Created symlink /etc/systemd/system/multi-user.target.wants/vsts.agent.kansalster.Default.ubuntuvm.service → /etc/systemd/system/vsts.agent.kansalster.Default.ubuntuvm.service.
root@vm1:~/agent#
root@vm1:~/agent#
root@vm1:~/agent# systemctl ubuntuvm status
Unknown operation ubuntuvm.
root@vm1:~/agent# systemctl status ubuntuvm
Unit ubuntuvm.service could not be found.
root@vm1:~/agent# systemctl status vsts.agent.kansalster.Default.ubuntuvm.service
● vsts.agent.kansalster.Default.ubuntuvm.service - Azure Pipelines Agent (kansalster.Default.ubuntuvm)
     Loaded: loaded (/etc/systemd/system/vsts.agent.kansalster.Default.ubuntuvm.service; enabled; vendor preset: enabled)
     Active: inactive (dead)
root@vm1:~/agent#
root@vm1:~/agent# systemctl start vsts.agent.kansalster.Default.ubuntuvm.service
root@vm1:~/agent#
root@vm1:~/agent# systemctl status vsts.agent.kansalster.Default.ubuntuvm.service
● vsts.agent.kansalster.Default.ubuntuvm.service - Azure Pipelines Agent (kansalster.Default.ubuntuvm)
     Loaded: loaded (/etc/systemd/system/vsts.agent.kansalster.Default.ubuntuvm.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2023-03-06 05:10:12 UTC; 1s ago
   Main PID: 9136 (runsvc.sh)
      Tasks: 20 (limit: 1076)
     Memory: 63.5M
     CGroup: /system.slice/vsts.agent.kansalster.Default.ubuntuvm.service
             ├─9136 /bin/bash /root/agent/runsvc.sh
             ├─9138 ./externals/node16/bin/node ./bin/AgentService.js
             └─9145 /root/agent/bin/Agent.Listener run --startuptype service

Mar 06 05:10:12 vm1 systemd[1]: Started Azure Pipelines Agent (kansalster.Default.ubuntuvm).
Mar 06 05:10:12 vm1 runsvc.sh[9136]: .path=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/s>
Mar 06 05:10:12 vm1 runsvc.sh[9138]: Starting Agent listener with startup type: service
Mar 06 05:10:12 vm1 runsvc.sh[9138]: Started listener process
Mar 06 05:10:12 vm1 runsvc.sh[9138]: Started running service
Mar 06 05:10:12 vm1 runsvc.sh[9138]: Scanning for tool capabilities.
Mar 06 05:10:12 vm1 runsvc.sh[9138]: Connecting to the server.
root@vm1:~/agent#



-------------- Docker as self hosted agent-------------------
https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/docker?view=azure-devops
1. Create Dockerfile
2. Install az cli on ubuntu vm
3. Authenticate from vm to azure using az login command
4. Authenticate to ACR using docker login
5. Tag the image
6. Push the image
docker run -e AZP_URL=https://dev.azure.com/kansalster/ -e AZP_TOKEN=<token> -e AZP_AGENT_NAME=mydockeragent dockeragent:latest --once
---

docker tag dockeragent:latest dockeragent0603121.azurecr.io/dockeragent:latest


-----------------------------
Security in CICD pipeline and different testing processes

Code Development Phase -- Static code analysis, link to work items
Continuous Integration Phase - static code analysis, vulnerability scanning, license check

Testing  -- Infrastructure scanning 
Deployment -- Load and Performance Testing

Testing: multiple type of testing:
Unit Testing
Code coverage
Code metrics
Static code analysis
Functional testing
Load Testing

1. Install mend in org as extension
2. Add step in build pipeline for mend
3. Click on mend result tab to see all vulnerability issues and open source license risks


code quality tool: SonarCloud
1. Sign in in sonarcloud with azure credentials and create org and project
2. Install sonarcloud extension in org
3. Add steps in build pipeline 
4. Login back to sonarcloud console to see code quality result.

----------------
Parallel Jobs:
https://learn.microsoft.com/en-us/azure/devops/pipelines/licensing/concurrent-jobs?view=azure-devops&tabs=ms-hosted

--------------------







